# SET
final_probSET <- predict(rfFitSET, transformedTest, type="prob")
head(final_probSET)
# Produce Table 1
probabilitySJ <- final_probSJ[,2]
SJTable <- data.frame(Id = ID, Probability = probabilitySJ)
SJTable$Id<-as.character(SJTable$Id)
names(SJTable)[1]<-"mudac_id"
names(SJTable)[2]<-"probabilitySJ"
SJTable<-SJTable %>% mutate(idSJ=paste(mudac_id, "SummaryJudgment", sep="-"))
# Produce Table 2
probabilitySET <- final_probSET[,2]
SETTable <- data.frame(Id = ID, Probability = probabilitySET)
SETTable$Id<-as.character(SETTable$Id)
names(SETTable)[1]<-"mudac_id"
names(SETTable)[2]<-"probabilitySET"
SETTable<-SETTable %>% mutate(idSET=paste(mudac_id, "Settled", sep="-"))
# Final Table
Submission <- SJTable %>%
left_join(SETTable, by="mudac_id") %>%
pivot_longer(cols=c("probabilitySJ","probabilitySET"),
names_to="type",
values_to="Probability") %>%
mutate(Id=case_when(type=="probabilitySJ"~idSJ,
type=="probabilitySET"~idSET)) %>%
select(Id, Probability)
write.csv(Submission, "iastate.edu_Team_30.csv", row.names = FALSE)
# Make copies of transformed data test set
copyTransformedTest <- transformedTest
# Add empty col for SJ and SET
copyTransformedTest$summary_judgment <- factor(c(0,1))
copyTransformedTest$settled <- factor(c(0,1))
# Produce a confusion matrix
# confusionMatrix(final_probSJ, as.factor(trainingSJ$summary_judgment))
# confusionMatrix(final_probSET, as.factor(trainingSET$settled))
# Provide a list of the most important variables
varImp(rfFitSJ)
varImp(rfFitSET)
# Load data sets in
train_dockets <- read_csv("~/MUDAC/Data/train_dockets.csv")
train_terminating_motions <- read_csv("~/MUDAC/Data/train_terminating_motions.csv")
train_other_motions <- read_csv("~/MUDAC/Data/train_other_motions.csv")
test_dockets <- read_csv("~/MUDAC/Data/test_dockets.csv")
test_terminating_motions <- read_csv("~/MUDAC/Data/test_terminating_motions.csv")
test_other_motions <-read_csv("~/MUDAC/Data/test_other_motions.csv")
# Combine the data sets together
half_docket <- train_terminating_motions %>%
group_by(mudac_id, motion_type) %>%
summarise(total_motion=n()) %>%
pivot_wider(values_from=total_motion,
names_from=motion_type) %>% right_join(train_dockets, by="mudac_id")
half_test <- test_terminating_motions %>%
group_by(mudac_id, motion_type) %>%
summarise(total_motion=n()) %>%
pivot_wider(values_from=total_motion,
names_from=motion_type) %>% right_join(test_dockets, by="mudac_id")
# Add pp
half_docket<-train_terminating_motions %>%
group_by(mudac_id, motion_type) %>%
summarise(mean_proceeding_percentile = mean(proceeding_precentile)) %>%
pivot_wider(values_from=mean_proceeding_percentile,
names_from=motion_type, names_prefix = "pp") %>%
right_join(half_docket, by= "mudac_id")
half_test<-test_terminating_motions %>%
group_by(mudac_id, motion_type) %>%
summarise(mean_proceeding_percentile = mean(proceeding_precentile)) %>%
pivot_wider(values_from=mean_proceeding_percentile,
names_from=motion_type, names_prefix = "pp") %>%
right_join(half_test, by= "mudac_id")
# Add other motions
complete_docket <- train_other_motions %>%
group_by(mudac_id, motion_type) %>%
summarise(total_motion=n()) %>%
pivot_wider(values_from=total_motion,
names_from=motion_type) %>% right_join(half_docket, by="mudac_id")
complete_test <- test_other_motions %>%
group_by(mudac_id, motion_type) %>%
summarise(total_motion=n()) %>%
pivot_wider(values_from=total_motion,
names_from=motion_type) %>% right_join(half_test, by="mudac_id")
# Remove unwanted variables
train_selection <- complete_docket %>%
select(summary_judgment, settled, mudac_id,
after_ij_entry_count, days_opened, total_entry_count, filers_county,
before_ij_entry_count, attorneys_listed, year_filed, district,
`Motion to Dismiss`, `Motion for Summary Judgment`, `Motion in Limine`,
`ppMotion to Consolidate`, `ppMotion for Summary Judgment`)
test_selection <- complete_test %>%
select(after_ij_entry_count, days_opened, total_entry_count, filers_county,
before_ij_entry_count, attorneys_listed, year_filed, district,
`Motion to Dismiss`, `Motion for Summary Judgment`, `Motion in Limine`,
`ppMotion to Consolidate`, `ppMotion for Summary Judgment`, mudac_id)
# Ungroup data sets
train_selection <- ungroup(train_selection)
test_selection <- ungroup(test_selection)
# Remove MUDAC ID
train_selection <- train_selection %>% select(-mudac_id)
test_selection <- test_selection %>% select(-mudac_id)
# Replace No motions with 0
train_selection[is.na(train_selection)] <- 0
test_selection[is.na(test_selection)] <- 0
# Creates Dummy Variables
dummy <- dummyVars("~ .",
data = train_selection,
fullRank = T)
dummyTest <- dummyVars("~ .",
data = test_selection,
fullRank = T)
# New data set with dummy variables replacing categorical variables
transformed <- data.frame(predict(dummy, newdata = train_selection))
transformedTest <- data.frame(predict(dummyTest, newdata = test_selection))
transformedSJ <- transformed %>% select(-settled)
transformedSET <- transformed %>% select(-summary_judgment)
# Partition the data set to make it more reasonable to deal with
inTrainingSJ <- createDataPartition(transformedSJ$summary_judgment, p = .05, list = FALSE)
trainingSJ <- transformedSJ[ inTrainingSJ,]
testingSJ  <- transformedSJ[-inTrainingSJ,]
inTrainingSET <- createDataPartition(transformedSET$settled, p = .05, list = FALSE)
trainingSET <- transformedSET[ inTrainingSET,]
testingSET  <- transformedSET[-inTrainingSET,]
#Change to factor so we can run random forest
trainingSJ$summary_judgment <- as.factor(trainingSJ$summary_judgment)
trainingSET$settled <- as.factor(trainingSET$settled)
# Run basic model
rfFitSJ <- train(summary_judgment~.,
data = trainingSJ,
method = "rf")
rfFitSET <- train(settled~.,
data = trainingSET,
method = "rf")
# Output model
rfFitSJ
rfFitSET
# Predict the testing set and output the results
final_SJPrediction <- predict(rfFitSJ, transformedTest)
head(final_SJPrediction)
summary(final_SJPrediction)
final_SETPrediction <- predict(rfFitSET, transformedTest)
head(final_SETPrediction)
summary(final_SETPrediction)
# Produce a table of probabilities
ID <- test_dockets$mudac_id
# SJ
final_probSJ <- predict(rfFitSJ, transformedTest, type="prob")
head(final_probSJ)
# SET
final_probSET <- predict(rfFitSET, transformedTest, type="prob")
sales=readr::read_csv("Ames_Liquor_Sales.csv")
library(dplyr)
library(ggplot2)
library(lubridate)
library(tidyverse)
library(stringr)
#data cleaning
#part 1
str(sales_clean)
sales_clean$`Vendor Number` = as.numeric(sales_clean$`Vendor Number`)
sales_clean$`lat` = as.numeric(sales_clean$`lat`)
sales_clean$`long` = as.numeric(sales_clean$`long`)
sales_clean$`Category Name` = factor(sales_clean$`Category Name`)
sales_clean$`Store Name` = factor(sales_clean$`Store Name`)
sales_clean = sales_clean %>% separate(Date, into = c('month', 'day', 'year'), sep = "/")
sales_clean = sales_clean %>%  mutate_at(.vars = vars(month:year))
sales_clean= sales
sales=readr::read_csv("Ames_Liquor_Sales.csv")
setwd("~/ds202_hw5")
sales=readr::read_csv("Ames_Liquor_Sales.csv")
library(dplyr)
library(ggplot2)
library(lubridate)
library(tidyverse)
library(stringr)
#data cleaning
sales_clean= sales
#part 2
str(sales_clean)
sales_clean$`Vendor Number` = as.numeric(sales_clean$`Vendor Number`)
sales_clean$`lat` = as.numeric(sales_clean$`lat`)
sales_clean$`long` = as.numeric(sales_clean$`long`)
sales_clean$`Vendor Number` = as.numeric(sales_clean$`Vendor Number`)
sales_clean$`lat` = as.numeric(sales_clean$`lat`)
sales_clean$`long` = as.numeric(sales_clean$`long`)
sales_clean$`Category Name` = factor(sales_clean$`Category Name`)
sales_clean$`Store Name` = factor(sales_clean$`Store Name`)
sales_clean = sales_clean %>% separate(Date, into = c('month', 'day', 'year'), sep = "/")
sales_clean = sales_clean %>%  mutate_at(.vars = vars(month:year))
sales=readr::read_csv("Ames_Liquor_Sales.csv")
library(dplyr)
library(ggplot2)
library(lubridate)
library(tidyverse)
library(stringr)
#data cleaning
View(sales)
#sales <- na.omit(sales)
sales = sales %>% separate(col=`Store Location`,into=c("point","coord"),sep="\\(") %>% separate(col=coord,into=c("Lat","Long"),sep=" ")
View(sales)
#sales <- na.omit(sales)
sales$`Store Location`=str_replace(sales$`Store Location`, "\\)","")
sales=readr::read_csv("Ames_Liquor_Sales.csv")
#sales <- na.omit(sales)
sales$`Store Location`=str_replace(sales$`Store Location`, "\\)","")
sales = sales %>% separate(col=`Store Location`,into=c("point","coord"),sep="\\(") %>% separate(col=coord,into=c("Lat","Long"),sep=" ")
View(sales)
#extract lat/long
sales$`Store Location`=str_replace(sales$`Store Location`, "\\)","")
sales_clean = sales %>% separate(col=`Store Location`,into=c("point","coord"),sep="\\(") %>% separate(col=coord,into=c("Lat","Long"),sep=" ")
sales=readr::read_csv("Ames_Liquor_Sales.csv")
library(dplyr)
library(ggplot2)
library(lubridate)
library(tidyverse)
library(stringr)
#extract lat/long
sales$`Store Location`=str_replace(sales$`Store Location`, "\\)","")
sales_clean = sales %>% separate(col=`Store Location`,into=c("point","coord"),sep="\\(") %>% separate(col=coord,into=c("Lat","Long"),sep=" ")
#converting to correct type
str(sales_clean)
sales_clean$`Vendor Number` = as.numeric(sales_clean$`Vendor Number`)
sales_clean$`lat` = as.numeric(sales_clean$`lat`)
sales_clean$Lat=as.numeric(sales_clean$Lat)
str(sales_clean)
sales_clean$Lat=as.numeric(sales_clean$Lat)
sales_clean$Long=as.numeric(sales_clean$Long)
sales_clean$`Vendor Number` = as.numeric(sales_clean$`Vendor Number`)
sales_clean$`Category Name` = factor(sales_clean$`Category Name`)
sales_clean$`Store Name` = factor(sales_clean$`Store Name`)
#date
sales_clean$Date = sales_clean %>% separate(Date, into = c('month', 'day', 'year'), sep = "/")
sales_clean$Date = sales_clean %>%  mutate_at(.vars = vars(month:year))
View(sales_clean)
sales=readr::read_csv("Ames_Liquor_Sales.csv")
library(dplyr)
library(ggplot2)
library(lubridate)
library(tidyverse)
library(stringr)
#data cleaning
#part 2
#extract lat/long
sales$`Store Location`=str_replace(sales$`Store Location`, "\\)","")
sales_clean = sales %>% separate(col=`Store Location`,into=c("point","coord"),sep="\\(") %>% separate(col=coord,into=c("Lat","Long"),sep=" ")
#converting to correct type
str(sales_clean)
sales_clean$Lat=as.numeric(sales_clean$Lat)
sales_clean$Long=as.numeric(sales_clean$Long)
sales_clean$`Vendor Number` = as.numeric(sales_clean$`Vendor Number`)
sales_clean$`Category Name` = factor(sales_clean$`Category Name`)
sales_clean$`Store Name` = factor(sales_clean$`Store Name`)
View(sales_clean)
sales_clean = subset(sales_clean, select = -c(sales_clean$point))
sales_clean = subset(sales_clean, select = -c(sales_clean$point))
sales_clean = subset(sales_clean, select = -c(point))
View(sales_clean)
str(sales_clean)
sales_clean$Lat=as.numeric(sales_clean$Lat)
sales_clean$Long=as.numeric(sales_clean$Long)
sales_clean$`Vendor Number` = as.numeric(sales_clean$`Vendor Number`)
sales_clean$`Category Name` = factor(sales_clean$`Category Name`)
sales_clean$`Store Name` = factor(sales_clean$`Store Name`)
#converting to correct type
str(sales_clean)
#date
sales_clean = sales_clean %>% separate(Date, into = c('month', 'day', 'year'), sep = "/")
View(sales_clean)
sales_clean = sales_clean %>%  mutate_at(.vars = vars(month:year))
#converting to correct type
str(sales_clean)
sales_clean$month=as.numeric(sales_clean$month)
sales_clean$day=as.numeric(sales_clean$day)
sales_clean$year=as.numeric(sales_clean$year)
#PLot lat and long
ggplot(data=liq2,aes(y=Long,x=Lat))+geom_point()+labs(y="Latitude",x="Longitude",title="Scatterplot of Latitude and Longitude")
#PLot lat and long
ggplot(data=sales_clean,aes(y=Long,x=Lat))+geom_point()+labs(y="Latitude",x="Longitude",title="Scatterplot of Latitude and Longitude")
install.packages(c("cowplot", "googleway", "ggplot2", "ggrepel",
"ggspatial", "libwgeom", "sf", "rnaturalearth", "rnaturalearthdata"))
install.packages(c("cowplot", "googleway", "ggplot2", "ggrepel", "ggspatial", "libwgeom", "sf", "rnaturalearth", "rnaturalearthdata"))
install.packages(c("cowplot", "googleway", "ggplot2", "ggrepel", "ggspatial", "libwgeom", "sf", "rnaturalearth", "rnaturalearthdata"))
ggplot(data = sales_clean) +
geom_sf() +
geom_point(data = sites, aes(x = Long, y = Lat), size = 4,
shape = 23, fill = "darkred") +
coord_sf(xlim = c(-88, -78), ylim = c(24.5, 33), expand = FALSE)
ggplot(data = world) +
geom_sf() +
geom_point(data = sites, aes(x = Long, y = Lat), size = 4,
shape = 23, fill = "darkred") +
coord_sf(xlim = c(-88, -78), ylim = c(24.5, 33), expand = FALSE)
sales=readr::read_csv("Ames_Liquor_Sales.csv")
install.packages(c("cowplot", "googleway", "ggplot2", "ggrepel",
"ggspatial", "libwgeom", "sf", "rnaturalearth", "rnaturalearthdata"))
library(dplyr)
library(ggplot2)
library(lubridate)
library(tidyverse)
library(stringr)
#data cleaning
####part 2###
#extract lat/long
sales$`Store Location`=str_replace(sales$`Store Location`, "\\)","")
sales_clean = sales %>% separate(col=`Store Location`,into=c("point","coord"),sep="\\(") %>% separate(col=coord,into=c("Lat","Long"),sep=" ")
sales_clean = subset(sales_clean, select = -c(point))
#converting to correct type
str(sales_clean)
sales_clean$Lat=as.numeric(sales_clean$Lat)
sales_clean$Long=as.numeric(sales_clean$Long)
sales_clean$`Vendor Number` = as.numeric(sales_clean$`Vendor Number`)
sales_clean$`Category Name` = factor(sales_clean$`Category Name`)
sales_clean$`Store Name` = factor(sales_clean$`Store Name`)
#date
sales_clean = sales_clean %>% separate(Date, into = c('month', 'day', 'year'), sep = "/")
sales_clean$month=as.numeric(sales_clean$month)
sales_clean$day=as.numeric(sales_clean$day)
sales_clean$year=as.numeric(sales_clean$year)
###Part 3###
#PLot lat and long
theme_set(theme_bw())
library("sf")
library("rnaturalearth")
library("rnaturalearthdata")
world <- ne_countries(scale = "medium", returnclass = "sf")
class(world)
ggplot(data = world) +
geom_sf() +
geom_point(data = sites, aes(x = Long, y = Lat), size = 4,
shape = 23, fill = "darkred") +
coord_sf(xlim = c(-88, -78), ylim = c(24.5, 33), expand = FALSE)
#ggplot(data=sales_clean,aes(y=Long,x=Lat))+geom_point()+labs(y="Latitude",x="Longitude",title="Scatterplot of Latitude and Longitude")
#
#
# sales_clean <-  sales_clean %>% group_by(`Category Name`) %>% summarise(total_amount_of_alcohal_sold = (sum(`Volume Sold (Gallons)`))) %>% filter(total_amount_of_alcohal_sold >= 20000)
# #summary(data_clean_x$total_amount_of_alcohal_sold)
# sales_clean %>% ggplot(aes(x = `Category Name`, y = `Volume Sold (Liters)`))+
#   geom_line(aes(color = `Category Name`))+ theme(legend.position = "none", axis.text.x = element_text(angle = 45))+ coord_flip()+
#   ggtitle("Amount of Alcohol Sold by Brand Name")+ xlab("Brand Name")+ ylab("Amount in Liters Sold") # Complete breakdown
# sales_clean %>% ggplot(aes(x = reorder(`Category Name`, total_amount_of_alcohal_sold), y = total_amount_of_alcohal_sold))+ geom_point(aes(color = total_amount_of_alcohal_sold))+ coord_flip()+
#   ggtitle("Subset of Popular Alcohol Quantites")+ xlab("Brand Name")+ ylab("Amount Sold in Gallons") # Subset of volume sold.
sales=readr::read_csv("Ames_Liquor_Sales.csv")
#install.packages(c("cowplot", "googleway", "ggplot2", "ggrepel",
"ggspatial", "libwgeom", "sf", "rnaturalearth", "rnaturalearthdata"))
library(dplyr)
library(ggplot2)
library(lubridate)
library(tidyverse)
library(stringr)
#data cleaning
####part 2###
#extract lat/long
sales$`Store Location`=str_replace(sales$`Store Location`, "\\)","")
sales_clean = sales %>% separate(col=`Store Location`,into=c("point","coord"),sep="\\(") %>% separate(col=coord,into=c("Lat","Long"),sep=" ")
sales_clean = subset(sales_clean, select = -c(point))
#converting to correct type
str(sales_clean)
sales_clean$Lat=as.numeric(sales_clean$Lat)
sales_clean$Long=as.numeric(sales_clean$Long)
sales_clean$`Vendor Number` = as.numeric(sales_clean$`Vendor Number`)
sales_clean$`Category Name` = factor(sales_clean$`Category Name`)
sales_clean$`Store Name` = factor(sales_clean$`Store Name`)
#date
sales_clean = sales_clean %>% separate(Date, into = c('month', 'day', 'year'), sep = "/")
sales_clean$month=as.numeric(sales_clean$month)
sales_clean$day=as.numeric(sales_clean$day)
sales_clean$year=as.numeric(sales_clean$year)
###Part 3###
#PLot lat and long
theme_set(theme_bw())
library("sf")
library("rnaturalearth")
library("rnaturalearthdata")
world <- ne_countries(scale = "medium", returnclass = "sf")
class(world)
ggplot(data = world) +
geom_sf() +
geom_point(data = sites, aes(x = Long, y = Lat), size = 4,
shape = 23, fill = "darkred") +
coord_sf(xlim = c(-88, -78), ylim = c(24.5, 33), expand = FALSE)
#ggplot(data=sales_clean,aes(y=Long,x=Lat))+geom_point()+labs(y="Latitude",x="Longitude",title="Scatterplot of Latitude and Longitude")
#
#
# sales_clean <-  sales_clean %>% group_by(`Category Name`) %>% summarise(total_amount_of_alcohal_sold = (sum(`Volume Sold (Gallons)`))) %>% filter(total_amount_of_alcohal_sold >= 20000)
# #summary(data_clean_x$total_amount_of_alcohal_sold)
# sales_clean %>% ggplot(aes(x = `Category Name`, y = `Volume Sold (Liters)`))+
#   geom_line(aes(color = `Category Name`))+ theme(legend.position = "none", axis.text.x = element_text(angle = 45))+ coord_flip()+
#   ggtitle("Amount of Alcohol Sold by Brand Name")+ xlab("Brand Name")+ ylab("Amount in Liters Sold") # Complete breakdown
# sales_clean %>% ggplot(aes(x = reorder(`Category Name`, total_amount_of_alcohal_sold), y = total_amount_of_alcohal_sold))+ geom_point(aes(color = total_amount_of_alcohal_sold))+ coord_flip()+
#   ggtitle("Subset of Popular Alcohol Quantites")+ xlab("Brand Name")+ ylab("Amount Sold in Gallons") # Subset of volume sold.
theme_set(theme_bw())
library("sf")
library("rnaturalearth")
library("rnaturalearthdata")
world <- ne_countries(scale = "medium", returnclass = "sf")
class(world)
install.packages("rgeos")
theme_set(theme_bw())
library("sf")
library("rnaturalearth")
library("rnaturalearthdata")
world <- ne_countries(scale = "medium", returnclass = "sf")
class(world)
ggplot(data = world) +
geom_sf() +
geom_point(data = sites, aes(x = Long, y = Lat), size = 4,
shape = 23, fill = "darkred") +
coord_sf(xlim = c(-88, -78), ylim = c(24.5, 33), expand = FALSE)
ggplot(data = world) +
geom_sf() +
geom_point(data = sales_clean, aes(x = Long, y = Lat), size = 4,
shape = 23, fill = "darkred") +
coord_sf(xlim = c(-88, -78), ylim = c(24.5, 33), expand = FALSE)
ggplot(data = world) +
geom_sf() +
geom_point(data = sales_clean, aes(x = Long, y = Lat), size = 4,
shape = 23, fill = "darkred") +
coord_sf(xlim = c(30,50 ), ylim = c(80, 100), expand = FALSE)
ggplot(data=sales_clean,aes(y=Long,x=Lat))+geom_point()+labs(y="Latitude",x="Longitude",title="Scatterplot of Latitude and Longitude")
sales_clean %>% ggplot(aes(y=`Volume Sold (Gallons)`))+geom_boxplot()+facet_wrap(~`Category Name`)
sales_clean <-  sales_clean %>% group_by(`Category Name`) %>% summarise(total_amount_of_alcohal_sold = (sum(`Volume Sold (Gallons)`))) %>% filter(total_amount_of_alcohal_sold >= 20000)
summary(data_clean_x$total_amount_of_alcohal_sold)
#need to fix
sales_clean %>% filter(!is.na(`Category Name`)) %>% group_by(`Category Name`) %>% summarize(`Volume(Liters)` = sum(`Volume Sold (Liters)`)) %>%
ggplot(aes(x = `Category Name`, y = `Volume(Liters)`)) +
geom_bar(stat = "identity") +
ggtitle("Voume of Alcohol Sold in Each Category")+theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
View(sales_clean)
Liquor2<-sales_clean %>%
group_by(month, day,year) %>%
summarize(`Number of Sales` = n(), `Total Volume Sold (Liters)` = sum(`Volume Sold (Liters)`),
`Money Spent` = sum(`Sale (Dollars)`)) %>%
arrange(month,day,year,desc(`Number of Sales`))
Liquor2
sales_clean %>% ggplot(aes(x=`Category Name`, count=`Volume Sold (Liters)`)) +
geom_bar(position=position_dodge(width = .5)) + coord_flip() + ylab('Volume Sold (Liters)') +
ggtitle("Voume of Alcohol Sold in Each Category") + theme(axis.text.y = element_text(size=5))
View(sales_clean)
sales=readr::read_csv("Ames_Liquor_Sales.csv")
#install.packages(c("cowplot", "googleway", "ggplot2", "ggrepel",  "ggspatial", "libwgeom", "sf", "rnaturalearth", "rnaturalearthdata"))
library(dplyr)
library(ggplot2)
library(lubridate)
library(tidyverse)
library(stringr)
#data cleaning
####part 2###
#extract lat/long
sales$`Store Location`=str_replace(sales$`Store Location`, "\\)","")
sales_clean = sales %>% separate(col=`Store Location`,into=c("point","coord"),sep="\\(") %>% separate(col=coord,into=c("Lat","Long"),sep=" ")
sales_clean = subset(sales_clean, select = -c(point))
#converting to correct type
str(sales_clean)
sales_clean$Lat=as.numeric(sales_clean$Lat)
sales_clean$Long=as.numeric(sales_clean$Long)
sales_clean$`Vendor Number` = as.numeric(sales_clean$`Vendor Number`)
sales_clean$`Category Name` = factor(sales_clean$`Category Name`)
sales_clean$`Store Name` = factor(sales_clean$`Store Name`)
#date
sales_clean = sales_clean %>% separate(Date, into = c('month', 'day', 'year'), sep = "/")
sales_clean$month=as.numeric(sales_clean$month)
sales_clean$day=as.numeric(sales_clean$day)
sales_clean$year=as.numeric(sales_clean$year)
sales_clean %>% ggplot(aes(x=`Category Name`, count=`Volume Sold (Liters)`)) +
geom_bar(position=position_dodge(width = .5)) + coord_flip() + ylab('Volume Sold (Liters)') +
ggtitle("Voume of Alcohol Sold in Each Category") + theme(axis.text.y = element_text(size=5))
sales_clean %>% ggplot(aes(x=`Category Name`, count=`Volume Sold (Liters)`)) +
geom_bar(position=position_dodge(width = .5)) + ylab('Volume Sold (Liters)') +
ggtitle("Voume of Alcohol Sold in Each Category") + theme(axis.text.y = element_text(size=5))
sales_clean %>% ggplot(aes(x=`Category Name`, count=`Volume Sold (Liters)`)) +
geom_bar(position=position_dodge(width = .5)) + ylab('Volume Sold (Liters)') +
ggtitle("Voume of Alcohol Sold in Each Category") + theme(axis.text.y = element_text(size=5)) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
summary(sales_clean$`Bottles Sold`)
mean(sales_clean$`Bottles Sold`)
sales_clean %>% ggplot(aes(x=Day, y=`Volume Sold (Liters)`)) + geom_point() +
geom_smooth() + facet_wrap(~Month) + ggtitle("Volume of Alcohol Sold in Ames by Day")
sales_clean %>% ggplot(aes(x=Day, y=`Volume Sold (Liters)`)) + geom_point(position = 'jitter') +
geom_smooth() + facet_wrap(~Month) + ggtitle("Volume of Alcohol Sold in Ames by Day")
sales_clean %>% ggplot(aes(x=Day, y=`Volume Sold (Liters)`)) + geom_point() + geom_smooth() + facet_wrap(~month) + ggtitle("Volume of Alcohol Sold in Ames by Day")
sales_clean %>% ggplot(aes(x=day, y=`Volume Sold (Liters)`)) + geom_point() + geom_smooth() + facet_wrap(~month) + ggtitle("Volume of Alcohol Sold in Ames by Day")
sales_clean %>% ggplot(aes(x=day, y=`Volume Sold (Liters)`)) + geom_point(position = 'jitter') + geom_smooth() + facet_wrap(~month) + ggtitle("Volume of Alcohol Sold in Ames by Day")
#5
sales_clean %>% ggplot(aes(x=Day,y=`Total Volume Sold (Liters)`))+facet_wrap(. ~Month)+geom_point()+geom_smooth()+ ylim(0, 15000)
rlang::last_error()
sales_clean %>% ggplot(aes(x=Day, y=`Volume Sold (Liters)`)) + geom_smooth() +
facet_wrap(~Month) + ggtitle("Volume of Alcohol Sold in Ames in 2019 by Month")
sales_clean %>% ggplot(aes(x=day, y=`Volume Sold (Liters)`)) + geom_smooth() +
facet_wrap(~month) + ggtitle("Volume of Alcohol Sold in Ames in 2019 by Month")
View(sales_clean)
theme_set(theme_bw())
library("sf")
library("rnaturalearth")
library("rnaturalearthdata")
world <- ne_countries(scale = "medium", returnclass = "sf")
class(world)
ggplot(data = world) +
geom_sf() +
geom_point(data = sales_clean, aes(x = Long, y = Lat), size = 4,
shape = 23, fill = "darkred") +
coord_sf(xlim = c(30,50 ), ylim = c(80, 100), expand = FALSE)
world <- ne_countries(scale = "medium", returnclass = "sf")
class(world)
ggplot(data = world) + geom_sf() + geom_point(data = sales_clean, aes(x = Long, y = Lat), size = 4,  shape = 23, fill = "darkred")
sites <- st_as_sf(sales_clean, coords = c("Long", "Latitude"), crs = 4326, agr = "constant"))
sites <- st_as_sf(sales_clean, coords = c("Long", "Latitude"), crs = 4326, agr = "constant")
sites <- st_as_sf(sales_clean, coords = c("Long", "Lat"), crs = 4326, agr = "constant")
sales_clean<- na.omit(sales_clean)
ggplot(data = world) + geom_sf() + geom_point(data = sales_clean, aes(x = Long, y = Lat), size = 4,  shape = 23, fill = "darkred")
sales_clean<- na.omit(sales_clean)
sites <- st_as_sf(sales_clean, coords = c("Long", "Lat"), crs = 4326, agr = "constant")
sites <- st_as_sf(sites, coords = c("Long", "Lat"), crs = 4326, agr = "constant")
sites <- st_as_sf(sales_clean, coords = c("Long", "Lat"), crs = 4326, agr = "constant")
ggplot(data = world) + geom_sf() + geom_point(data = sites, aes(x = Long, y = Lat), size = 4,  shape = 23, fill = "darkred")
# coord_sf(xlim = c(30,50), ylim = c(80, 100), expand = FALSE)
View(sites)
